@model Aiplugs.CMS.Web.ViewModels.StorageViewModels.PageViewModel
@{
    ViewData["Title"] = "Files | aiplugs";
    ViewData.AddActivePage(SharedNavPages.Files);
    var breadcrumbs = Url.Breadcrumbs(Model.Path);
}

<aiplugs-blade wide expanded>
    <ul is="aiplugs-breadcrumb">
        @foreach ((var name, var link) in breadcrumbs)
        {
            <li><a href="@link">@name</a></li>
        }
    </ul>
    <form id="files" method="post" class="flex" enctype="multipart/form-data">
        <aiplugs-actions id="actions">
            <button type="button" is="aiplugs-button" looks="block" color="primary" open="#upload-dialog" open-to="#files">Upload</button>
            <template id="upload-dialog">
                <aiplugs-dialog>
                    <label slot="content">
                        <input type="file" name="files" multiple/>
                    </label>
                    <div slot="actions">
                        <button type="submit" is="aiplugs-button" name="upload" value="upload" looks="block" color="primary">Upload</button>
                        <button type="button" is="aiplugs-button" close="aiplugs-dialog">Close</button>
                    </div>
                </aiplugs-dialog>
            </template>
            <button type="button" is="aiplugs-button" looks="block" open="#mkdir-dialog" open-to="#files">New Folder</button>
            <template id="mkdir-dialog">
                <aiplugs-dialog>
                    <div slot="content">
                        <aiplugs-input name="Name" label="フォルダ名" required />
                    </div>
                    <div slot="actions">
                        <button type="submit" is="aiplugs-button" name="mkdir" looks="block" color="primary" value="mkdir">Create</button>
                        <button type="button" is="aiplugs-button" close="aiplugs-dialog">Close</button>
                    </div>
                </aiplugs-dialog>
            </template>
            <button type="button" is="aiplugs-button" looks="block" when="one" open="#rename-dialog" open-to="#files">Rename</button>
            <template id="rename-dialog">
                <aiplugs-dialog>
                    <div slot="content">
                        <input type="hidden" name="Destination" value="@Model.Path" />
                        <aiplugs-input name="Name" label="Rename" required />
                    </div>
                    <div slot="actions">
                        <button type="submit" is="aiplugs-button" name="mv" looks="block" color="primary" value="mv">Update</button>
                        <button type="button" is="aiplugs-button" close="aiplugs-dialog">Close</button>
                    </div>
                </aiplugs-dialog>
            </template>
            <span is="aiplugs-space"></span>
            <button type="button" is="aiplugs-button" when="any" open="#delete-dialog">Delete</button>
            <template id="delete-dialog">
                <aiplugs-dialog>
                    <p slot="content">本当に削除しますか？</p>
                    <div slot="actions">
                        <button type="submit" is="aiplugs-button" color="warning" close="aiplugs-dialog">Yes</button>
                        <button type="button" is="aiplugs-button" looks="block" color="primary" close="aiplugs-dialog">No</button>
                    </div>
                </aiplugs-dialog>
            </template>
        </aiplugs-actions>

        <aiplugs-list id="list" label-name="Name*" label-size="Size" label-lastmodified="Last Modified" onchange="onSelectedItems()">
            @foreach (var folder in Model.Folders)
            {
                <aiplugs-list-item name="Folders[]" item="@folder.Name">
                    <aiplugs-list-column class="flex">
                        <a href="@Url.FolderLink(Model.Path, folder.Name)"><i class="fa fa-folder"></i>@folder.Name</a>
                    </aiplugs-list-column>
                    <aiplugs-list-column class="text-small"></aiplugs-list-column>
                    <aiplugs-list-column class="text-small"></aiplugs-list-column>
                </aiplugs-list-item>
            }
            @if (Model.Files.Count() > 0)
            {
                var maxSize = Model.Files.Max(f => f.Size);
                var padSize = maxSize.ToString("##,###").Length;
                foreach (var file in Model.Files)
                {
                    var previewLink = Url.FilePreviewLink(Model.Path, file.Name);
                    <aiplugs-list-item name="Files[]" item="@file.Name">
                        <aiplugs-list-column class="flex" ic-get-from="@previewLink" ic-target="#preview" ic-replace-target="true">
                            <i class="far fa-file"></i>@file.Name
                        </aiplugs-list-column>
                        <aiplugs-list-column class="text-small" ic-get-from="@previewLink" ic-target="#preview" ic-replace-target="true">
                            <span style="text-align: right; width: @(padSize * 8)px;">
                                @file.Size.ToString("##,###")
                            </span>
                            [B]
                        </aiplugs-list-column>
                        <aiplugs-list-column class="text-small" ic-get-from="@previewLink" ic-target="#preview" ic-replace-target="true">
                            @file.LastModifiedAt
                        </aiplugs-list-column>
                    </aiplugs-list-item>
                }
            }
        </aiplugs-list>
    </form>
</aiplugs-blade>
<div id="preview"></div>
<script>
    function onSelectedItems() {
        const actions = AiplugsElements.find('#actions');
        const list = AiplugsElements.find('#list');
        actions.items = list.electedItems.length;
    }
</script>

@section Scripts {
    <script>

    </script>
}
